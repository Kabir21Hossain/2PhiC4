Django is web application framework written in python programming language. It is based on MVT(model view template) design pattern.

it is also called battaries included framework because django provides built-in features for everything.

keyWords:

MTV=Model View template
ORM=Object Relational Mapping(interaction between database using python)


ðŸ”¹ Key Features of Django

MTV Architecture (Model-Template-View)
Similar to MVC, but Django uses the terms:

Model â€“ defines the database structure.

Template â€“ handles the UI (HTML).

View â€“ processes user requests and returns responses.

ORM (Object-Relational Mapping)
You interact with the database using Python classes instead of writing raw SQL.

Admin Panel (Auto-generated)
Django automatically creates a professional admin interface for managing site content.

Security
Django helps developers avoid many common security issues, like:

SQL injection

Cross-site scripting (XSS)

Cross-site request forgery (CSRF)

Clickjacking

Scalability
It can handle high traffic and large data loads (used by Instagram, Pinterest).

Built-in Tools
Includes URL routing, form handling, authentication, sessions, and more.





ðŸ”¹ Companies Using Django

Instagram

Mozilla

Disqus

Pinterest

The Washington Post





user --> django --> url -><--- view-----1.model 2.template



```````````````````Virtual Environment```````````````(as soon as you have created a virtual environment, you will a find a folder in the location)



A virtual environment in Python is an isolated environment where you can install packages and dependencies without affecting the global Python setup on your system.

* activate virtual enviraonment-

pip install virtualenv ( globally accessed)


--- now at any drive you can make an environment to work---


* check version

virtualenv --version

* naming an enviraonment

virtualenv my_env

OR
python -m venv <name of your environment you want to create>

* activate enviraonment

source ./my_env/Scripts/activate
OR
myenv\Scripts\activate(<you virtual environment name>\Scripts\activate)

*deactivating environment

deactivate



------ Django Installation-------

* check if Django exists or not
Â    python -m django --version

* if no module 'django' is known,then apply following procedure-

Â    i. create a virtual environment
Â    ii. activate it
Â    iii.now install django there(command: pip install django)
Â    iv.now check version of django(command: python -m django --version)

* if i get out of this environment(command:deactivate) i won't find this django module(command: python -m django --version) because
it can't be globally accessed.

* If I want to access it globally, I have to install django outside the room(commad: pip install django).Now we can access it globally

* how uninstall django module :(command: pip uninstall django)

* how to show all pip list:( command: pip list)
* how to show any module(pip show <module name>)(example: pip show virtualenv,pip show django)



(extension in vscode: python,python extension pack,python indent,Django,django)
-------- First Django  Project-----(in terminal)
Â    1. django-admin startproject first_project # explanation: django-admin startproject <project name>
Â    # as soon as you have execute the first line, it will create a folder name first_project. Inside it you have a same name folder.Inside it you will find so many packages. (run manage.py file)
Â    2.cd first_project
Â    3.python manage.py runserver
Â    4. you will find a link in terminal ,click on it


----------first_project folder-----
/                   \
Â                                \

Â    /
Â    first_project               manage.py

Â    - __init__.py(because this file ,python consider any folder containing this as python package)
Â    -  wsgi.py(web server gateway interface-is a specification that describes how a web server communicates with web application synchronous)
Â    - asgi.py(asynchronous server gateway interface. Provides both asynchronous and synchronous)
Â    - settings.py(contains all the information or data about project setting.config info,template installed application,validators )
Â    - urls.py( url with application)
Â    - manage.py( project specific command line utility)

Â    unit of project = application(projects contains of application)

Â    ex:

Â    school management(project or folder)
Â                |
Â                | Teachers(appllication or apps)
Â                | students(")
Â                | Fees (")
Â                | courses(")
Â 
Â    * to create application or apps in a project
Â    command: django-admin startapp <app_name>




Â    ------- working with urls.py and views.py-----


Â        * you will find no 'views.py' file in you 'first_project' folder.
Â 	* create a 'views.py' under 'first_project' folder.
Â 	* write function in 'views.py'
Â 
Â 				from django.http import HttpResponse

Â 			**def home(request):**
     					\*\*return HttpResponse('hello this is my first django page')\*\*



				\*\*def about(request):\*\*

    					\*\*return HttpResponse('hello, this is my about page')\*\*

	







Â 
Â 	* connect with urls.py

Â 		from . import views


Â 	**urlpatterns = \[**
    			\*\*path('admin/', admin.site.urls),\*\*

    			\*\*path('',views.home),\*\*

    			\*\*path('about/',views.about)\*\*

			\*\*]\*\*





















---APPS(Application)---

Now dynamicity----->
Â 		*create your firs app:
Â 			( command:django-admin startapp 'first_app' )inside your 'first_project'

Â 		* go to settings.py in your first_project and in installed apps, add '<your app>,'
Â 
Â 		* create a 'urls.py' in first_app
Â 		* in first_project urls.py----								i. import include 							ii. path('',include('first_app.urls'))



